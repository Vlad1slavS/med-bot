import logging
import requests
import httpx
import os
from dotenv import load_dotenv
from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
    WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    CommandHandler,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
from voice_processing.main import convert_ogg_to_wav
from utils.utils import send_audio_to_server, send_text_to_server, format_schedule, get_info, get_categories

load_dotenv()


WAITING_FOR_DOCTOR = 1
WAITING_ANALYSIS = 2
WAITING_QUESTION = 3
CATEGORY_SELECTED = 4

TOKEN = os.getenv("TOKEN")
CHOOSE_MAP_WEBAPP = "https://mellow-caramel-c43daa.netlify.app/"
FASTAPI_URL = os.getenv("FASTAPI_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)


async def start(update: Update, context: CallbackContext):
    await show_main_keyboard(update, context)


async def handle_voice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = update.message.chat_id
    voice = update.message.voice
    file_id = voice.file_id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file_info = await context.bot.get_file(file_id)
    file_url = file_info.file_path

    response = httpx.get(file_url)
    if response.status_code == 200:
        file_path = f"./voices/voice_{chat_id}.wav"
        convert_ogg_to_wav(response.content, file_path)
        result = await send_audio_to_server(file_path)
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!")

async def handle_keyboard_buttons(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    text = update.message.text
    match text:
        case "–ù–∞–∑–∞–¥":
            await show_main_keyboard(update, context)
        case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚úÖ":
            await update.message.reply_text("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä \n" + "–ù–æ–º–µ—Ä –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞: 8(3022)73-70-73")
            await show_main_keyboard(update, context)
        case "–û –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ üìÑ":
            result = await get_info("info")
            text = format_schedule(result['info'])
            await update.message.reply_text(text, parse_mode="Markdown")
        case "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è üî¨":
            categories = await get_categories("categories")
            categories = categories['categories']
            keyboard = [[InlineKeyboardButton(category, callback_data=category)] for category in categories]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=reply_markup)
            return WAITING_ANALYSIS
        case "—Å–ø—Ä–∞–≤–∫–∏ (–±–∞—Å—Å–µ–π–Ω)":
            pass
        case "—Å–ø—Ä–∞–≤–∫–∏ (–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º)":
            pass
        case _:
            context.user_data["attempts_to_call_center"] = context.user_data.get("attempts_to_call_center", 0) + 1
            if context.user_data.get("attempts_to_call_center", 0) == 3:
                msg = f"–Ø –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º \n" + "–ù–æ–º–µ—Ä –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞: 8(3022)73-70-73"
                await update.message.reply_text(msg)
                context.user_data["attempts_to_call_center"] = 0


async def analysis_category_chosen(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    query = update.callback_query
    await query.answer()

    category = query.data

    print(category)

    if category == "—Å–ø—Ä–∞–≤–∫–∏ (–±–∞—Å—Å–µ–π–Ω)" or category == "—Å–ø—Ä–∞–≤–∫–∏ (–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º)":
        analyses = await send_text_to_server("analysis-list/certificates", category)
        analysis_list_text = "\n".join(
            [
                f"üß™ - {analysis['full_text'][:100]} : {analysis['price']} —Ä—É–±."
                for analysis in analyses
            ]
        )
        await context.bot.send_message(chat_id=update.effective_chat.id,text=analysis_list_text)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    context.user_data["selected_category"] = category

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    await context.bot.send_message(chat_id=update.effective_chat.id,text=
        f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )

    return WAITING_ANALYSIS


async def restore_previous_keyboard(update: Update, context: CallbackContext):
    """–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é"""
    previous_keyboard = context.user_data.get("last_keyboard")
    if previous_keyboard:
        reply_markup = ReplyKeyboardMarkup(previous_keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥...", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é.")

async def show_main_keyboard(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("–í—Ä–∞—á–∏ üë©üèª‚Äç‚öïÔ∏è"), KeyboardButton("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è üî¨")],
        [KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üôãüèª")],
        [KeyboardButton("–û –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ üìÑ")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.user_data["last_keyboard"] = keyboard
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
async def request_doctor(update: Update, context: CallbackContext):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–∞—á–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:")
    return WAITING_FOR_DOCTOR

async def request_question(update: Update, context: CallbackContext):
    await update.message.reply_text("–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å! \n" + "–ù–∞–ø—Ä–∏–º–µ—Ä: (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–¥–∞—á–µ –∫—Ä–æ–≤–∏ –∏ –¥—Ä.)")
    return WAITING_QUESTION

async def process_doctor(update: Update, context: CallbackContext):
    doctor_name = update.message.text.strip()
    if not doctor_name:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")
        return WAITING_FOR_DOCTOR

    await update.message.reply_text("–ò—â–µ–º –≤—Ä–∞—á–µ–π... ‚è≥")

    doctors = await send_text_to_server("doctors-list", doctor_name)

    if "error" in doctors:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –î–∞–Ω–Ω—ã–π –≤—Ä–∞—á —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return ConversationHandler.END

    if not doctors:
        await update.message.reply_text("–í—Ä–∞—á–∏ —Å —Ç–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
    doctor_list_text = "\n".join(
        [f"üë®‚Äç‚öïÔ∏è {doc['specialization']} - {doc['academic_degree']} ({doc['type_visit']}): {doc['price']} —Ä—É–±."
         for doc in doctors]
    )

    await update.message.reply_text(f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–∞—á–µ–π:\n\n{doctor_list_text}")

    # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–∞—á–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚úÖ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?", reply_markup=reply_markup)

    return ConversationHandler.END

async def process_question(update: Update, context: CallbackContext):
    question_name = update.message.text.strip()
    if not question_name:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return WAITING_QUESTION

    msg = await send_text_to_server("faq", question_name)

    if msg['answer'] != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ!":
        await update.message.reply_text(msg['answer'], parse_mode="Markdown")
    else:
        context.user_data["attempts_to_call_center"] = context.user_data.get("attempts_to_call_center", 0) + 1
        await update.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    return ConversationHandler.END


async def process_search_query(update: Update, context: CallbackContext):
    user_input = update.message.text
    category = context.user_data.get("selected_category")

    analyses = await send_text_to_server("analysis-list", f"{category}.{user_input}")

    if not analyses or "error" in analyses:
        await update.message.reply_text("–î–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return ConversationHandler.END

    analysis_list_text = "\n".join(
        [
            f"üî¨ - {analysis['full_text'][:100]} : {analysis['price']} —Ä—É–±."
            for analysis in analyses
        ]
    )

    await update.message.reply_text(analysis_list_text, parse_mode="Markdown")


    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("–í—Ä–∞—á–∏ üë©üèª‚Äç‚öïÔ∏è"), request_doctor),
            MessageHandler(filters.Regex("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üôãüèª"), request_question),
            MessageHandler(filters.Regex("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è üî¨"), handle_keyboard_buttons)
        ],
        states={
            WAITING_FOR_DOCTOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_doctor)],
            WAITING_ANALYSIS: [
                CallbackQueryHandler(analysis_category_chosen),  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_search_query)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            ],
            WAITING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_question)],
        },
        fallbacks=[]
    )
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(analysis_category_chosen))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keyboard_buttons))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
