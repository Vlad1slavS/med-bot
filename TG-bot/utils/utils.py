import httpx
from dotenv import load_dotenv
import os

load_dotenv()


async def send_audio_to_server(file_path: str):

    FASTAPI_URL = os.getenv("FASTAPI_URL")

    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    url = FASTAPI_URL + "/process_audio"
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
    with open(file_path, "rb") as file:
        files = {"file": (file_path.split(".")[1].split("/")[-1] + ".wav", file, "audio/wav")}
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∞–π–ª–æ–º
        async with httpx.AsyncClient() as client:
            response = await client.post(url, files=files)
            
            if response.status_code == 200:
                    try:
                        result = response.json()
                        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", result)
                        return result
                    except Exception as e:
                        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON:", str(e))
                        return {"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON"}
            else:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", response.status_code)
                return {"error": f"–û—à–∏–±–∫–∞ {response.status_code}"}


async def send_text_to_server(endpoint, text: str):
    FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")  # –ü–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π URL
    url = f"{FASTAPI_URL}/{endpoint}"

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(url, json={"text": text})
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return {"error": f"–û—à–∏–±–∫–∞ {e.response.status_code}"}
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", str(e))
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}

async def get_info(endpoint):
    FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")  # –ü–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π URL
    url = f"{FASTAPI_URL}/{endpoint}"

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url)
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return {"error": f"–û—à–∏–±–∫–∞ {e.response.status_code}"}
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", str(e))
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}


def format_schedule(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
    text = "üìç *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ:*\n\n"

    if data.get("phone"):
        text += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{data['phone']}`\n\n"

    for addr in data.get("addresses", []):
        text += f"üè• *–ê–¥—Ä–µ—Å:* {addr['address']}\n"
        text += "üïí *–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞:*\n"
        for sched in addr.get("diagnostic_schedule", []):
            text += f"   üìÖ {sched['days']}: {sched['hours']}\n"

        if addr.get("lab_schedule"):
            text += "üß™ *–ë–∞–∫—Ç–µ—Ä–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è:*\n"
            for sched in addr["lab_schedule"]:
                text += f"   üìÖ {sched['days']}: {sched['hours']}\n"

        text += "\n"

    return text


import os
import httpx


async def get_categories(endpoint):
    FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")  # –ü–æ–¥—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π URL
    url = f"{FASTAPI_URL}/{endpoint}"
    secret = os.getenv("SECRET_KEY")
    headers = {
        "Authorization": f"Bearer {secret}"  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except httpx.HTTPStatusError as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
            return {"error": f"–û—à–∏–±–∫–∞ {e.response.status_code}"}
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", str(e))
            return {"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}

